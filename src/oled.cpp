#include "oled.h"
#include "config.h"
#include "state.h"
#include "maths.h"
#include "serial.h"
#include <Wire.h>
#include <SSD1306Wire.h>

#define SIGNAL_LOST_TIMEOUT_MS 3000

static const uint8_t LOGO_XMB[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xF8, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0x07, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x8F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xC0, 0xDF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFE, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x1F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
    0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xC0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xF8,
    0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xE3, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF9, 0x0F, 0xFF, 0x7F, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7D, 0x00,
    0xF8, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xC0, 0x0E, 0x00, 0xF0, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x40, 0x00, 0xF0, 0xFF, 0x1F, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xF8, 0x1F,
    0xF0, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x38, 0x78, 0x7E, 0xF0, 0xFF, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x80, 0x3C, 0x7C, 0xF8, 0xE1, 0x3F, 0xE0, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x1E, 0x7F, 0xF8,
    0xC3, 0x3F, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x70, 0xCE, 0x0F, 0xFF, 0xC1, 0x3F, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x38, 0xEF, 0x07, 0xF8, 0x81, 0x3F, 0x00, 0x1E,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0xE7, 0xFF, 0xFF,
    0xFF, 0x3F, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x9E, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x70, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xCE, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF, 0xF3, 0x7F, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
    0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x79, 0x1F,
    0x1C, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC7, 0xB3, 0x79, 0x0F, 0x3E, 0xDF, 0xBE, 0x8D, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x9F, 0xCF, 0xB7, 0x19, 0x06, 0xA6, 0xD9, 0x86, 0xCD,
    0xE7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x4D, 0xF6, 0x19, 0x06,
    0x86, 0xD9, 0x86, 0xCD, 0xF6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB3,
    0xCD, 0xF6, 0x78, 0x06, 0x8C, 0xC1, 0x86, 0x4F, 0x36, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xB7, 0xCD, 0xF0, 0x78, 0x06, 0x98, 0xC1, 0x9E, 0x6F,
    0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0xCD, 0xF0, 0x19, 0x04,
    0xB0, 0xC1, 0x9E, 0x6F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBE,
    0xD9, 0xF6, 0x19, 0x04, 0xB6, 0xD9, 0x86, 0x6F, 0xF0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xB6, 0xD9, 0xB6, 0x19, 0x04, 0xB6, 0xD9, 0xC6, 0x6E,
    0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB6, 0xD9, 0x26, 0x7B, 0x0C,
    0xBE, 0xCF, 0xCE, 0x6E, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36,
    0xDF, 0x27, 0x7B, 0x04, 0x1C, 0x4F, 0xDE, 0x6E, 0x13, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x36, 0x8F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x98, 0xCC,
    0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00};

static char s_Buffer[128];
static SSD1306Wire s_Display(0x3C, OLED_SDA_PIN, OLED_SCL_PIN);
static int s_LastRX;
static unsigned long s_LastUpdateTime;

static float _GetRSSIPercentage(float rssi);
static void _OLEDDrawProgressBar(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t progress);
static void _OLEDDrawBatteryIndicator(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t percentage);

void OLEDInit()
{
    s_Display.init();
    s_Display.flipScreenVertically();
    s_Display.setTextAlignment(TEXT_ALIGN_LEFT);
    s_Display.setFont(ArialMT_Plain_10);
    s_Display.clear();
    s_Display.drawXbm(0, 0, 128, 64, LOGO_XMB);
    s_Display.display();

    SERIAL_DEBUG_PRINTF("Initialized OLED!\n");
}

void OLEDUpdateScreen(const OLEDInputData &data)
{
    s_Display.clear();

    s_Display.setTextAlignment(TEXT_ALIGN_LEFT);

    if (data.rx != s_LastRX)
    {
        s_LastUpdateTime = millis();
    }

    s_LastRX = data.rx;

    if (data.rssi < 0 && millis() - s_LastUpdateTime < SIGNAL_LOST_TIMEOUT_MS)
    {
        _OLEDDrawProgressBar(0, 2, 45, 6, (uint8_t)_GetRSSIPercentage(data.rssi));

        s_Display.drawStringf(51, 0, s_Buffer, "%d", data.rssi);
    }
    else
    {
        s_Display.drawStringf(0, 0, s_Buffer, "NO SIGNAL");
    }

    s_Display.drawStringf(0, 13, s_Buffer, "RX: %d", data.rx);
    s_Display.drawStringf(50, 13, s_Buffer, "TX: %d", data.tx);

    s_Display.drawStringf(0, 27, s_Buffer, "%d m", (int)CalculateGeoDistance(data.lat, data.lon, data.targetLat, data.targetLon));
    s_Display.drawStringf(0, 42, s_Buffer, "%.7f", StateGetCurrent() == SystemState::GCS ? data.lat : data.targetLat);
    s_Display.drawStringf(0, 52, s_Buffer, "%.7f", StateGetCurrent() == SystemState::GCS ? data.lon : data.targetLon);

    _OLEDDrawBatteryIndicator(110, 41, 30, 15, StateGetCurrent() == SystemState::GCS ? data.batteryPercentage : data.targetBatteryPercentage);

    s_Display.setTextAlignment(TEXT_ALIGN_RIGHT);
    s_Display.drawStringf(127, 0, s_Buffer, StateGetCurrent() == SystemState::GCS ? "GCS" : "ROCKET");
    s_Display.drawStringf(127, 18, s_Buffer, "%d %%", StateGetCurrent() == SystemState::GCS ? data.batteryPercentage : data.targetBatteryPercentage);
    s_Display.drawStringf(127, 53, s_Buffer, "%.2f V", StateGetCurrent() == SystemState::GCS ? data.batteryVoltage : data.targetBatteryVoltage);

    s_Display.display();
}

static float _GetRSSIPercentage(float rssi)
{
    const float y_a = 0.0f, y_b = 100.0f, x_a = -130.0f, x_b = -10.0f;

    return constrain((y_b - y_a) / (x_b - x_a) * (rssi - x_a) + y_a, y_a, y_b);
}

void _OLEDDrawProgressBar(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t progress)
{
    s_Display.fillRect(x, y, width * (float)progress / 100.0f, height);
}

void _OLEDDrawBatteryIndicator(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t percentage)
{
    const uint8_t MAX_STEPS_COUNT = 4;
    const uint16_t TOTAL_STEP_WIDTH = width / MAX_STEPS_COUNT;
    const uint16_t STEP_WIDTH = TOTAL_STEP_WIDTH * 0.75;
    const uint16_t STEP_HEIGHT = height * 0.75;

    s_Display.drawRect(x - width / 2, y - height / 2, width, height);
    s_Display.fillRect(x - width / 2 - width / 10, y - height / 4, width / 10, height / 2);

    uint8_t stepsCount = (uint8_t)ceilf(MAX_STEPS_COUNT * (float)percentage / 100);

    for (uint8_t i = 0; i < stepsCount; i++)
    {
        s_Display.fillRect(x + TOTAL_STEP_WIDTH * (1 - i) + (TOTAL_STEP_WIDTH - STEP_WIDTH) / 2, y - STEP_HEIGHT / 2, STEP_WIDTH, STEP_HEIGHT);
    }
}